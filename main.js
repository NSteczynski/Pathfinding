!function(e){function t(t){for(var n,a,r=t[0],d=t[1],l=t[2],u=0,c=[];u<r.length;u++)a=r[u],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&c.push(i[a][0]),i[a]=0;for(n in d)Object.prototype.hasOwnProperty.call(d,n)&&(e[n]=d[n]);for(p&&p(t);c.length;)c.shift()();return s.push.apply(s,l||[]),o()}function o(){for(var e,t=0;t<s.length;t++){for(var o=s[t],n=!0,r=1;r<o.length;r++){var d=o[r];0!==i[d]&&(n=!1)}n&&(s.splice(t--,1),e=a(a.s=o[0]))}return e}var n={},i={0:0},s=[];function a(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=e,a.c=n,a.d=function(e,t,o){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(a.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(o,n,function(t){return e[t]}.bind(null,n));return o},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var r=window.webpackJsonp=window.webpackJsonp||[],d=r.push.bind(r);r.push=t,r=r.slice();for(var l=0;l<r.length;l++)t(r[l]);var p=d;s.push([4,1]),o()}([,function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(2);t.Capitalize=e=>e.charAt(0).toUpperCase()+e.slice(1,e.length).toLowerCase(),t.getMaxRows=()=>{const e=window.innerWidth<=768?20:40;return Math.floor(window.innerHeight/e)<2?2:Math.floor(window.innerHeight/e)},t.getMaxColumns=()=>{const e=window.innerWidth<=768?20:40;return Math.floor(window.innerWidth/e)<4?4:Math.floor(window.innerWidth/e)},t.getNodeStartPosition=(e,t)=>({x:Math.floor(e/4),y:Math.floor(t/2)}),t.getNodeEndPosition=(e,t)=>({x:Math.floor(e/4*3),y:Math.floor(t/2)}),t.getVectorDistance=(e,t)=>{const o={x:e.x-t.x,y:e.y-t.y};return Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2))},t.getPathFromNode=e=>{const o=[e];return e.parent&&o.unshift(...t.getPathFromNode(e.parent)),o},t.getNodeNeighbors=(e,t,o,i)=>{const s=[],a=`${i.position.x-1}-${i.position.y}`,r=i.position.x-1>=0;r&&e[a].type===n.NodeTypes.UNVISITED&&s.push({position:e[a].position,parent:i});const d=`${i.position.x+1}-${i.position.y}`,l=i.position.x+1<o;l&&e[d].type===n.NodeTypes.UNVISITED&&s.push({position:e[d].position,parent:i});const p=`${i.position.x}-${i.position.y+1}`,u=i.position.y+1<t;u&&e[p].type===n.NodeTypes.UNVISITED&&s.push({position:e[p].position,parent:i});const c=`${i.position.x}-${i.position.y-1}`,f=i.position.y-1>=0;f&&e[c].type===n.NodeTypes.UNVISITED&&s.push({position:e[c].position,parent:i});const g=`${i.position.x+1}-${i.position.y+1}`;u&&l&&e[g].type===n.NodeTypes.UNVISITED&&s.push({position:e[g].position,parent:i});const h=`${i.position.x-1}-${i.position.y-1}`;f&&r&&e[h].type===n.NodeTypes.UNVISITED&&s.push({position:e[h].position,parent:i});const m=`${i.position.x+1}-${i.position.y-1}`;f&&l&&e[m].type===n.NodeTypes.UNVISITED&&s.push({position:e[m].position,parent:i});const x=`${i.position.x-1}-${i.position.y+1}`;return u&&r&&e[x].type===n.NodeTypes.UNVISITED&&s.push({position:e[x].position,parent:i}),s}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.DIJKSTRA="Dijkstra",e.ASTAR="A*"}(t.Algorithms||(t.Algorithms={})),function(e){e.UNVISITED="unvisited",e.VISITED="visited",e.WALL="wall",e.START="start",e.END="end",e.PATH="path"}(t.NodeTypes||(t.NodeTypes={}))},,function(e,t,o){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(o(0)),a=n(o(6)),r=i(o(10));o(20),a.render(s.createElement(r.default,null),document.getElementById("app"))},,,,,,function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0)),s=n(o(11)),a=n(o(14)),r=n(o(15)),d=n(o(16)),l=n(o(17)),p=n(o(18)),u=o(19),c=o(2),f=o(1),g={[c.Algorithms.DIJKSTRA]:d.default,[c.Algorithms.ASTAR]:l.default};t.default=()=>{const[e,t]=i.default.useState(u.defaultSettings),[o,n]=i.default.useState({}),[d,l]=i.default.useState(u.defaultBoardEvents),[h,m]=i.default.useState([]);i.default.useEffect(()=>(window.addEventListener("resize",x),window.addEventListener("mousedown",_),window.addEventListener("mouseup",v),T(),()=>{window.removeEventListener("resize",x),window.removeEventListener("mousedown",_),window.removeEventListener("mouseup",v),T()}),[]),i.default.useEffect(()=>{const o=f.getNodeStartPosition(e.columns,e.rows),i=f.getNodeEndPosition(e.columns,e.rows),s={};for(let t=0;t<e.columns;++t)for(let o=0;o<e.rows;++o)s[`${t}-${o}`]={type:c.NodeTypes.UNVISITED,position:{x:t,y:o}};t(e=>Object.assign(Object.assign({},e),{startNode:o,endNode:i,isPlaying:!1,isPaused:!1})),n(s),T()},[e.rows,e.columns]),i.default.useEffect(()=>{if(e.isPlaying)return b()},[e.isPlaying]),i.default.useEffect(()=>{if(h.length)return e.isPaused?y():w()},[e.isPaused]),i.default.useEffect(()=>{if(!e.isFinished)return;const t=E(),o=g[e.algorithm],[i,s]=o(t,e.rows,e.columns,e.startNode,e.endNode);for(let e=0,o=i.length;e<o;++e)t[`${i[e].position.x}-${i[e].position.y}`].type=i[e].type;for(let e=0,o=s.length;e<o;++e)t[`${s[e].position.x}-${s[e].position.y}`].type=s[e].type;n(t)},[e.startNode,e.endNode]);const x=()=>{const e=f.getMaxRows(),o=f.getMaxColumns();t(t=>Object.assign(Object.assign({},t),{rows:e,maxRows:e,columns:o,maxColumns:o}))},b=()=>{const o=E(),i=g[e.algorithm],[s,a]=i(o,e.rows,e.columns,e.startNode,e.endNode),r=u.AlgorithmInterval/e.playingSpeed,d=[];for(let e=0,t=s.length;e<t;++e)d.push(new p.default(()=>O(s[e].position,s[e].type),r*e));for(let e=0,t=a.length;e<t;++e)d.push(new p.default(()=>O(a[e].position,a[e].type),r*(s.length+e)));d.push(new p.default(()=>t(e=>Object.assign(Object.assign({},e),{isPlaying:!1})),r*(s.length+a.length))),n(o),m(d),t(e=>Object.assign(Object.assign({},e),{isFinished:!0}))},y=()=>{for(let e=0,t=h.length;e<t;++e)h[e].pause()},w=()=>{for(let e=0,t=h.length;e<t;++e)h[e].resume()},N=(o,n)=>t(Object.assign(Object.assign({},e),{[o]:n})),v=()=>l(e=>Object.assign(Object.assign({},e),u.defaultBoardEvents)),_=()=>l(e=>Object.assign(Object.assign({},e),{isMouseDown:!0})),E=()=>{const e=Object.assign({},o),t=Object.keys(e);for(let o=0,n=t.length;o<n;++o)e[t[o]].type!==c.NodeTypes.VISITED&&e[t[o]].type!==c.NodeTypes.PATH||(e[t[o]].type=c.NodeTypes.UNVISITED);return e},T=()=>{for(let e=0,t=h.length;e<t;++e)h[e].clear();m([])},O=(e,t)=>{const i=`${e.x}-${e.y}`;null!=o[i]&&n(e=>Object.assign(Object.assign({},e),{[i]:Object.assign(Object.assign({},o[i]),{type:t})}))};return i.default.createElement(i.default.Fragment,null,i.default.createElement(s.default,Object.assign({},e,{onChange:N,onReset:()=>{const o={};for(let t=0;t<e.columns;++t)for(let n=0;n<e.rows;++n)o[`${t}-${n}`]={type:c.NodeTypes.UNVISITED,position:{x:t,y:n}};n(o),T(),t(e=>Object.assign(Object.assign({},e),{isPlaying:!1,isPaused:!1,isFinished:!1}))}})),i.default.createElement(a.default,{items:c.NodeTypes}),i.default.createElement(r.default,Object.assign({},e,{nodes:o,onStartNode:()=>l(e=>Object.assign(Object.assign({},e),{isNodeStartDown:!0})),onEndNode:()=>l(e=>Object.assign(Object.assign({},e),{isNodeEndDown:!0})),onNodeDown:t=>{if(e.isPlaying)return;const n=`${t.x}-${t.y}`,i=o[n].type;return i===c.NodeTypes.UNVISITED?O(t,c.NodeTypes.WALL):i===c.NodeTypes.WALL?O(t,c.NodeTypes.UNVISITED):void 0},onNodeOver:t=>{if(!d.isMouseDown||e.isPlaying)return;const n=`${t.x}-${t.y}`,i=o[n].type;return!d.isNodeStartDown&&!d.isNodeEndDown||i!==c.NodeTypes.WALL?d.isNodeStartDown&&i!==c.NodeTypes.WALL?N("startNode",t):d.isNodeEndDown&&i!==c.NodeTypes.WALL?N("endNode",t):i===c.NodeTypes.UNVISITED?O(t,c.NodeTypes.WALL):i===c.NodeTypes.WALL?O(t,c.NodeTypes.UNVISITED):void 0:void 0}})))}},function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0)),s=n(o(12)),a=n(o(13)),r=o(2);t.default=({rows:e,maxRows:t,columns:o,maxColumns:n,playingSpeed:d,isPlaying:l,isPaused:p,algorithm:u,onChange:c,onReset:f})=>i.default.createElement("div",{className:"header"},i.default.createElement(s.default,{name:"rows",label:`Rows (2 - ${t})`,value:e,min:2,max:t,step:1,disabled:l,onChange:c}),i.default.createElement(s.default,{name:"columns",label:`Columns (4 - ${n})`,value:o,min:4,max:n,step:1,disabled:l,onChange:c}),i.default.createElement(s.default,{name:"playingSpeed",label:"Speed (0.5 - 2.0)",value:d,min:.5,max:2,step:.25,disabled:l,onChange:c}),i.default.createElement(a.default,{name:"algorithm",label:"Algorithm",value:u,options:r.Algorithms,disabled:l,onChange:c}),i.default.createElement("button",{onClick:()=>l?c("isPaused",!p):c("isPlaying",!l)},l?p?"Resume":"Pause":"Play"),i.default.createElement("button",{onClick:f},"Reset"))},function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0));t.default=({name:e,label:t,value:o,min:n,max:s,step:a,disabled:r,onChange:d})=>i.default.createElement("div",{className:"field"},i.default.createElement("label",null,t),i.default.createElement("input",{type:"number",value:o,onChange:t=>{const o=parseFloat(t.currentTarget.value)||n;d(e,o<n?n:o>s?s:o)},onFocus:e=>e.currentTarget.select(),step:a,disabled:r}))},function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0)),s=o(1);t.default=({name:e,label:t,value:o,options:n,disabled:a,onChange:r})=>{const[d,l]=i.default.useState(!1),p=i.default.useRef(null);i.default.useEffect(()=>(window.addEventListener("click",u),()=>window.removeEventListener("click",u)),[]);const u=e=>{let t=e.target;for(;t;){if(t==p.current)return;t=t.parentElement}l(!1)},c=Object.keys(n).map(t=>{const a=n[t]===o?"active":"";return i.default.createElement("li",{key:t,className:a,onClick:()=>r(e,n[t])},s.Capitalize(n[t]))}),f="select"+(a?" disabled":"")+(d?" open":"");return i.default.createElement("div",{className:"field"},i.default.createElement("label",null,t),i.default.createElement("div",{className:f},i.default.createElement("p",{ref:p,onClick:()=>!a&&l(!d)},s.Capitalize(o)),i.default.createElement("ul",null,c)))}},function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0)),s=o(1);t.default=({items:e})=>{const t=Object.keys(e).map(t=>i.default.createElement("span",{key:t,className:e[t]},s.Capitalize(e[t])));return i.default.createElement("div",{className:"legend"},t)}},function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(o(0));t.default=({nodes:e,rows:t,columns:o,startNode:n,endNode:s,isPlaying:a,onStartNode:r,onEndNode:d,onNodeDown:l,onNodeOver:p})=>{const u="board"+(a?" disabled":""),c=[];if(Object.keys(e).length)for(let a=0;a<t;++a){const t=[];for(let u=0;u<o;++u){const o=`${u}-${a}`;null!=e[o]&&(u===n.x&&a===n.y?t.push(i.default.createElement("span",{key:o,className:"start",onMouseDown:r})):u===s.x&&a===s.y?t.push(i.default.createElement("span",{key:o,className:"end",onMouseDown:d})):t.push(i.default.createElement("span",{key:o,className:e[o].type,onMouseDown:()=>l(e[o].position),onMouseOver:()=>p(e[o].position)})))}c.push(i.default.createElement("div",{key:`row-${a}`,className:"row"},t))}return i.default.createElement("div",{className:u},c)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(2),i=o(1),s=(e,t,o,n)=>{const s=i.getNodeNeighbors(e,t,o,n);for(let e=0,t=s.length;e<t;++e){const t=s[e],o=n.distance+i.getVectorDistance(n.position,t.position);s[e]=Object.assign(Object.assign({},s[e]),{distance:o})}return s};t.default=(e,t,o,a,r)=>{const d=[{position:a,distance:0}],l=[];let p={position:r,distance:1/0};for(;d.length;){const n=d.shift(),i=s(e,t,o,n);for(let e=0,t=i.length;e<t;++e){const t=i[e];l.find(e=>e.position.x===t.position.x&&e.position.y===t.position.y)||(t.position.x===r.x&&t.position.y===r.y&&(p=Object.assign({},t)),null==p.parent&&d.push(t),l.push(t))}}const u=p?i.getPathFromNode(p).map(e=>({position:e.position,type:n.NodeTypes.PATH})):[];return[l.sort((e,t)=>e.distance<t.distance?-1:e.distance>t.distance?1:0).reduce((e,t)=>(t.distance>p.distance||e.push({position:t.position,type:n.NodeTypes.VISITED}),e),[]),u]}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(2),i=o(1),s=e=>{let t=0;for(let o=1,n=e.length;o<n;++o)e[o].cost<e[t].cost&&(t=o);return t},a=(e,t,o,n,s)=>{const a=i.getNodeNeighbors(e,t,o,n);for(let e=0,t=a.length;e<t;++e){const t=a[e],o=n.distance+i.getVectorDistance(n.position,t.position),r=i.getVectorDistance(t.position,s);a[e]=Object.assign(Object.assign({},a[e]),{distance:o,heuristic:r,cost:o+r})}return a};t.default=(e,t,o,r,d)=>{const l=[{position:r,cost:0,distance:0,heuristic:0}],p=[];let u={position:d,cost:1/0,distance:1/0,heuristic:1/0};for(;l.length;){const n=s(l),i=l.splice(n,1)[0];if(i.position.x===d.x&&i.position.y===d.y&&(u=Object.assign({},i)),u.parent)continue;p.push(i);const r=a(e,t,o,i,d);for(let e=0,t=r.length;e<t;++e){const t=r[e],o=p.find(e=>e.position.x===t.position.x&&e.position.y===t.position.y),n=l.find(e=>e.position.x===t.position.x&&e.position.y===t.position.y);o||(n&&t.cost>n.cost||null==n&&l.push(t))}}const c=u?i.getPathFromNode(u).map(e=>({position:e.position,type:n.NodeTypes.PATH})):[];return[p.sort((e,t)=>e.cost<t.cost?-1:e.cost>t.cost?1:0).reduce((e,t)=>(t.cost>u.cost||e.push({position:t.position,type:n.NodeTypes.VISITED}),e),[]),c]}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._callback=e,this._remainingTime=t,this.resume()}pause(){clearTimeout(this._timer),this._remainingTime-=Date.now()-this._start}resume(){this._remainingTime<-200||(this._start=Date.now(),clearTimeout(this._timer),this._timer=setTimeout(this._callback,this._remainingTime))}clear(){clearTimeout(this._timer)}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(2),i=o(1),s=i.getMaxRows(),a=i.getMaxColumns(),r=i.getNodeStartPosition(a,s),d=i.getNodeEndPosition(a,s);t.defaultSettings={rows:s,maxRows:s,columns:a,maxColumns:a,startNode:r,endNode:d,playingSpeed:1,isPlaying:!1,isPaused:!1,isFinished:!1,algorithm:n.Algorithms.DIJKSTRA},t.AlgorithmInterval=100,t.defaultBoardEvents={isMouseDown:!1,isNodeStartDown:!1,isNodeEndDown:!1}},function(e,t,o){var n=o(21),i=o(22);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},a=(n(i,s),i.locals?i.locals:{});e.exports=a},,function(e,t,o){(t=o(23)(!1)).push([e.i,".board{width:100%;flex-grow:1;display:flex;flex-wrap:wrap;justify-content:center}.board>.row{display:flex;flex-direction:row;width:100%;flex-grow:1}.board>.row>span{width:100%;height:100%;border:1px solid #fff;user-select:none}.board>.row>span:hover{cursor:pointer}.board>.row>span.visited{background:#55146e}.board>.row>span.wall{background:#a7a6a6}.board>.row>span.start{background:#108b6d;transition:none}.board>.row>span.checkpoint{background:#18479e}.board>.row>span.end{background:#911e1e;transition:none}.board>.row>span.path{background:#c9bc09}.board.disabled>.row>span:hover{cursor:auto}.header{display:flex;flex-direction:row;padding:10px;background:#181818;border-bottom:1px solid #fff}.header>button{background:transparent;border:1px solid #fff;color:rgba(255,255,255,0.8);outline:none;font-size:20px;padding:10px;margin:0px 5px}.header>button:hover{background:#1f1f1f;cursor:pointer}.header>button:focus{background:#2c2c2c}.header>button:disabled{background:transparent;color:rgba(255,255,255,0.368627);border-color:rgba(255,255,255,0.368627)}.header>button:disabled:hover{cursor:auto}@media only screen and (max-width: 1023px){.header{padding:5px}.header>button{font-size:16px;padding:5px}}@media only screen and (max-width: 767px){.header>button{font-size:13px;padding:2.5px}}@media only screen and (max-width: 424px){.header{padding:5px 0px}.header>button{font-size:11px;margin:0px 2.5px}}.legend{display:flex;flex-direction:row;margin:20px}.legend>span{display:block;color:rgba(255,255,255,0.8);font-size:24px;padding:5px 10px;width:100%;display:flex;align-items:center;justify-content:center;position:relative}.legend>span:before{content:'';display:block;width:40px;height:40px;margin-right:10px;border:1px solid #fff}.legend>span.visited:before{background:#55146e}.legend>span.wall:before{background:#a7a6a6}.legend>span.start:before{background:#108b6d}.legend>span.end:before{background:#911e1e}.legend>span.path:before{background:#c9bc09}@media only screen and (max-width: 1023px){.legend{margin:10px}.legend>span{font-size:18px}.legend>span:before{width:25px;height:25px}}@media only screen and (max-width: 767px){.legend{margin:5px 0px}.legend>span{font-size:16px;padding:5px 5px}.legend>span:before{width:15px;height:15px;margin-right:5px}}@media only screen and (max-width: 424px){.legend>span{font-size:12px;padding:5px 2.5px}.legend>span:before{width:12px;height:12px}}.field{position:relative;margin:10px}.field>label{position:absolute;top:-15px;color:rgba(255,255,255,0.368627);font-size:12px}@media only screen and (max-width: 1023px){.field>label{font-size:9px}}@media only screen and (max-width: 767px){.field>label{font-size:6px;top:-8px}}.field:before{content:'';position:absolute;bottom:0px;left:0px;width:100%;border-bottom:1px solid #fff}@media only screen and (max-width: 767px){.field{margin:5px 2.5px 0px}}input{background:transparent;border:none;color:rgba(255,255,255,0.8);height:100%;outline:none;width:175px;font-size:18px}input:disabled{color:rgba(255,255,255,0.368627)}@media only screen and (max-width: 1023px){input{width:110px;font-size:14px}}@media only screen and (max-width: 767px){input{width:75px;font-size:11px}}@media only screen and (max-width: 424px){input{width:55px}}.select{color:rgba(255,255,255,0.8);font-size:18px;position:relative}.select>p{width:175px;margin:0px}.select>p:hover{cursor:pointer}@media only screen and (max-width: 1023px){.select>p{width:110px;font-size:14px}}@media only screen and (max-width: 767px){.select>p{width:75px;font-size:11px}}@media only screen and (max-width: 424px){.select>p{width:55px}}.select>ul{position:absolute;z-index:1000;top:25px;left:0px;margin:0px;padding:0px;overflow:hidden;height:0px;width:100%;background:#121212;transition:none}@media only screen and (max-width: 1023px){.select>ul{top:20px}}.select>ul>li{padding:5px 10px;border-left:1px solid #fff;border-right:1px solid #fff;border-bottom:1px solid #fff}.select>ul>li:first-child{border-top:1px solid #fff}.select>ul>li:hover{cursor:pointer;background:#2c2c2c}.select>ul>li.active{background:#383838}@media only screen and (max-width: 1023px){.select>ul>li{font-size:14px;padding:2.5px 5px}}.select.open>ul{height:auto}.select.disabled>p{color:rgba(255,255,255,0.368627)}.select.disabled>p:hover{cursor:auto}*,*:before,*:after{box-sizing:border-box;font-family:roboto;transition:all .3s}body{margin:0px;padding:0px;width:100vw;height:100vh;overflow:hidden;background:#121212;transition:none}body>#app{display:flex;flex-direction:column;width:100%;height:100%}\n",""]),e.exports=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,